/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name: XBMC
System Number: 1.0
Programmer: Neil Carthy (arduino@scpgwiki.com)
Comments:                                             
    
	Part of code structure taken from Shannon Larratt, Josh Freeman
	http://www.zentastic.com/blog/2009/05/12/arduino-timer-test-code/


	***** License *****

	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#SYMBOL_NAME "Multitap Detect"
#CATEGORY "32" // Miscellaneous
#HINT "Detect single, double and triple taps."  


/////////////////////Compiler Directives
#PRINT_TO_TRACE
#ENABLE_DYNAMIC
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#HELP_BEGIN
   Single Single, Double and Triple taps of a button
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Input;
ANALOG_INPUT MaxTimeBetweenMultiTaps; //Default value of 250ms set in "Main"

DIGITAL_OUTPUT SingleTap;
DIGITAL_OUTPUT DoubleTap;
DIGITAL_OUTPUT TripleTap;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER _MaxTimeBetweenMultiTaps;
INTEGER timeOfLastTap;
INTEGER tapCount;

CHANGE MaxTimeBetweenMultiTaps
{
     _MaxTimeBetweenMultiTaps = MaxTimeBetweenMultiTaps;
}
    
PUSH Input
{
    INTEGER currentTime; 
    INTEGER timeBetweenLastTwoTaps;

    currentTime = GetHSeconds();
	timeBetweenLastTwoTaps = currentTime - timeOfLastTap;
 
    // should the tap be considered part of a previous tap sequence?
    if (timeBetweenLastTwoTaps < _MaxTimeBetweenMultiTaps && timeBetweenLastTwoTaps > 0)
    {
        // tap is soon enough after previous tap
        // to continue the current tap sequence
        tapCount = tapCount + 1;
         
        // restart the sequence if it's reached the limit
        if (tapCount > 3)
        {
            tapCount = 1;

			CancelAllWait();
        }
    }
    else
    {
        // too long since last tap - begin a new tap sequence
        tapCount = 1;
    }
 
    timeOfLastTap = currentTime;                                		
    
	CSWITCH (tapCount)
	{
		CASE (1) :
		{
			WAIT (_MaxTimeBetweenMultiTaps, Button_Wait1)
			{
			    switch (tapCount)
			    {
			        CASE (1): Pulse(1, SingleTap);
					CASE (2): Pulse(1, DoubleTap);
			        CASE (3): Pulse(1, TripleTap);
				}
			}
			Break;
		}
		CASE (2) :
		{
			CancelAllWait();
			WAIT (_MaxTimeBetweenMultiTaps, Button_Wait2)
			{
			    switch (tapCount)
			    {
			        CASE (1): Pulse(1, SingleTap);
					CASE (2): Pulse(1, DoubleTap);
			        CASE (3): Pulse(1, TripleTap);
				}
			}
			Break;
		}
		CASE (3) :
		{
			CancelAllWait();
			WAIT (_MaxTimeBetweenMultiTaps, Button_Wait3)
			{
			    switch (tapCount)
			    {
			        CASE (1): Pulse(1, SingleTap);
					CASE (2): Pulse(1, DoubleTap);
			        CASE (3): Pulse(1, TripleTap);
				}
			}
			Break;
		}
    }

}
   
///////////// Initialization script
Function Main()
{                            
	WaitForInitializationComplete();
    
	//Default value of 250ms 
	IF (_MaxTimeBetweenMultiTaps = 0)
		_MaxTimeBetweenMultiTaps = 25;
}
