/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name: XBMC
System Number: 0.3 (EventServer & JSON)
Programmer: Neil Carthy (arduino@scpgwiki.com)
Comments:                                             

	In order for this module to work you must switch on the XBMC broadcast
	messages using:
		http://xbmc_ip_address:8080/xbmcCmds/xbmcHttp?command=SetBroadcast&parameter=1;8278
    Check that this is working by viewing:
		http://xbmc_ip_address:8080/xbmcCmds/xbmcHttp?command=GetBroadcast
    
	***** License *****

	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#SYMBOL_NAME "XBMC-FB"
#CATEGORY "41" // Remote System Interface
#HINT "Receive XBMC Broadcast Feedback"  

/////////////////////Compiler Directives
#PRINT_TO_TRACE
#ENABLE_DYNAMIC
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#OUTPUT_SHIFT 2			// Shift the outputs down 2 lines on the SIMPL window


/*****    DEFINE NEW CONSTANTS    *******/
#DEFINE_CONSTANT DEBUG 1               

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, _SKIP_ ,Connect, _SKIP_;


STRING_INPUT XBMC_IPAddr$[16],				//the ip of the XBMC server.
				Filename$[255]; 				// the filename of the current track
                          
DIGITAL_OUTPUT CheckMetadata,
				ClearCurrentlyPlaying,
				IsPlayingOnMPC, _SKIP_,		// HIGH when the file is being played by mpc-hc
											// rather than the internal XBMC player
				PlayFB,
				PauseFB,
				StopFB,
				_SKIP_;

STRING_OUTPUT PlayStatus$, PlayingSpeed$;

///////////////////////////// Parameters
INTEGER_PARAMETER Broadcast_Port#;		 //the port that the XBMC sends broadcast packets from
#BEGIN_PARAMETER_PROPERTIES Broadcast_Port#
   propValidUnits = unitDecimal;
   propDefaultValue = 8278d;   
   propShortDescription = "The port that the XBMC sends broadcast packets from.";
#END_PARAMETER_PROPERTIES


/////////////////////////// Sockets
UDP_SOCKET FbUdp[1024];  		// Feedback via UDP

/////////////////////////// Global Variables
SIGNED_INTEGER PlaySpeed;

/////////////////////////// Events
PUSH Connect
{
	INTEGER LocalStatus;

 	LocalStatus = SocketUDP_Enable(FbUdp, XBMC_IPAddr$, Broadcast_Port#);
    
	IF (LocalStatus != 0)
	{
        #IF_DEFINED DEBUG PRINT("UDP Error: %s:%d", XBMC_IPAddr$, Broadcast_Port#); #ENDIF
     	GenerateUserError( "(%s) %s", GetSymbolInstanceName( ), "Unable to enable EventServer Udp socket." );
	}

}
RELEASE Connect
{
	INTEGER LocalStatus;

 	LocalStatus = SocketUDP_Disable(FbUdp);
	IF (LocalStatus != 0)
	{
     	GenerateUserError( "(%s) %s", GetSymbolInstanceName( ), "Unable to DISable EventServer Udp socket." );
	}
}

CHANGE Filename$
{
	IF (FIND(".ts", Filename$) || FIND(".mkv", Filename$) || FIND(".m2ts", Filename$) )
		IsPlayingOnMPC = ON; 
	ELSE
		IsPlayingOnMPC = OFF;
} 
       
/*
	Process text broadcast from XBMC
*/
SOCKETRECEIVE FbUdp
{
	STRING Sbuffer[1024];
	INTEGER iEvent;
	INTEGER iEventLevel;
	INTEGER F[2];				// used in parsing the string
    STRING TempSpeed$[3];
	Delay(5);					// let buffer fill up

	Sbuffer = FbUdp.SocketRxBuf;
	ClearBuffer(FbUdp.SocketRxBuf);

	#IF_DEFINED DEBUG  print("\nXBMC-FB: Udp = %s\n\n", Sbuffer); #ENDIF

	If(Find("OnAction", Sbuffer))
	{
		F[0] = Find(":", Sbuffer);
		F[1] = Find(";", Sbuffer, F[0]);
		If(F[1] = 0) F[1] = F[0];
		F[2] = Find("<", Sbuffer, F[1]);
		iEvent = Atoi(Mid(Sbuffer, F[0]+1, F[1]-F[0]-1));
		iEventLevel = Atoi(Mid(Sbuffer, F[1]+1, F[2]-F[1]-1));
		print("XBMC-FB: iEvent = %u iEventLevel = %u\n", iEvent, iEventLevel);
	}
	Else If(Find("SpeedChanged", Sbuffer))
	{                

		TempSpeed$ 		= mid(Sbuffer,     find("OnPlayBackSpeedChanged",sbuffer)+23    ,  find(";",sbuffer)-(find("OnPlayBackSpeedChanged",sbuffer)+23) );

		if (Find("-",TempSpeed$)) 
			PlaySpeed 	= -(atoi(TempSpeed$));
		else
			PlaySpeed 	= atoi(TempSpeed$);
		
		MakeString(PlayingSpeed$,"%dx",PlaySpeed);

		PULSE(10, CheckMetadata); 
	}
	Else If(Find("OnPlayBackSeek",Sbuffer) 
						|| Find("MediaChanged",Sbuffer)
						|| Find("OnQueueNextItem", Sbuffer))
	{                 
		// Do Nothing
	}	
	Else If(Find("OnPlayBackStarted", Sbuffer))
	{
		PauseFb		= 0; 
		StopFb		= 0; 
		PlayFb		= 1; 
		PlaySpeed	= 1; 
		Makestring(PlayingSpeed$, "%dx", PlaySpeed);
		PlayStatus$ = "Playing";
		PULSE(10, CheckMetadata);
	}
	Else If(Find("OnPlayBackPaused", Sbuffer)) 
	{
		StopFb			= 0; 
		PlayFb			= 0; 
		PauseFb			= 1; 
		PlayingSpeed$ 	= ""; 
		PlayStatus$ = "Paused";
		PULSE(10, CheckMetadata);
	}
	Else If(Find("OnPlayBackEnded", Sbuffer))
	{
		PlayFb					= 0; 
		PauseFb					= 0;
		StopFb					= 1; 
		PlayingSpeed$ 			= ""; 
		PlayStatus$ = "Stopped";
		PULSE(10, CheckMetadata);
		Pulse(10, ClearCurrentlyPlaying);
	}
	Else If(Find("OnPlayBackResumed", Sbuffer))
	{
		PauseFb					= 0; 
		StopFb					= 0; 
		PlayFb					= 1; 
		PlaySpeed				= 1; 
		PlayStatus$ = "Playing";
		Makestring(PlayingSpeed$, "%dx", PlaySpeed);
		Wait(100) 
		{ 
			PULSE(10, CheckMetadata);
			Pulse(10, ClearCurrentlyPlaying); 
		}
	}
	Else If(Find("OnPlayBackStopped", Sbuffer))
	{   
		PauseFb					= 0; 
		PlayFb					= 0; 
		StopFb					= 1; 
		PlaySpeed				= 0;                        
		PlayStatus$ = "Stopped";
		PlayingSpeed$ = ""; 
		
		PULSE(10, CheckMetadata);
		Pulse(10, ClearCurrentlyPlaying);

	}
	Else If(Find("StartUp", Sbuffer) > 0)//StartUp
	{
		Pulse(10, ClearCurrentlyPlaying);
	}
	Else
		PRINT("XBMC-FB: Unknown Feedback: %s\n", LEFT(SBuffer,100));		
}
               
///////////// Initialization script
Function Main()
{                            
	WaitForInitializationComplete();
}
